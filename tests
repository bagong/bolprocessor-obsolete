#!/bin/bash
# This assumes a build using the makefile. Xcode builds require some adjustments.
# This script is work in progress at a very basic stage. Provided the environment
# is complete (gcc, git and csound (and ssh if upoad is enabled)), three steps should 
# be enough to build and run tests: 
#
# - clone the repo:                 `https://github.com/bagong/bolprocessor`
# - change into the project-folder: `cd bolprocessor`
# - run "tests":                    `./tests <system>`
#
# The first step will become `git pull` (or something more considerate) on subsequent 
# runs. Not sure if the script can be made to detect the environment by itself in a 
# cross-platform manner, for now an argument is required. Apart from file-name
# generation, this is so far only used in MinGW-MSYS2 builds on Windows though. Here
# the "make" command needs to be replaced by `mingw32-make` and the csound-binary 
# cannot be queried with `which` or `where`. Build and tests run in the MinGW64-shell,
# to run tests in the native console has not been attempted yet, but manual tests look
# very promising. Note that the builds have to be done in the MinGW 32 or 64 shell, 
# not the MSYS2 one. It might be possible to build with the later as well, but the 
# resulting binary will not work in the native Windows environment. Below are the
# proposed arguments. You can be creative with other environment-names in a unixy
# console, but `windows-msys2` is relied upon in the script:
#
# - `macos-catalina`
# - `rpi-buster`
# - `windows-msys2`
# 
# The bagong-repo is used because bpconsole and the php-frontend are folded into one,
# the ctests-folder is provisionally put under version-control so that it can be cloned
# as part of the reop, and because it contains this file ;-)
# 
# The archives of test-builds and output-files are uploaded to the domain 
# bp.bagong.de/archives using scp. Downloads should be possible in a browser
# from https://bp.bagong.de/archives/. Write access can be arranged by adding a
# public certificate to the domain.
#
# I will try to make this more useful in the coming weeks. For example I do not know
# what happens if a build fails - they never seem to fail! Generally it would be nice
# to produce output that shows clearly if things work as expected. I am happy with any
# input!

if [ ! $1 ]; then
	echo
	echo "### Please add an argument describing the build-environment!"
	echo "### Example:" 
	echo "###          ./tests windows-msys2"
	echo "### or" 
	echo "###          ./tests debian-jessie"
	echo "###"
	echo "### In case of windows-msys2 the script will fail if the argument"
	echo "### is misspelled. On Unixy consoles the argument is used for"
	echo "### archive-name generation only."
	echo "###"
	echo "### Stopping script-execution..."
	echo
	exit 1
fi

export PROJECTDIR="$(pwd)"
export NOW="$(date +'%Y.%m.%d-%H.%M.%S')"
export COMMIT="$(git rev-parse --short HEAD)"
export SYSTEM="$1"
if [ "$SYSTEM" == "windows-msys2" ]; then
	export MAKECMD="mingw32-make"
	export BINARY="bp.exe"
	# This is the standard install in the native environment.
	# Note the 8.3 filename for Program Files to avoid the space.
	# This might not work, or support for 8.3-names needs to be
	# enabled on some systems.
	export CSEXEC="/c/PROGRA~1/Csound6_x64/bin/csound.exe"
else
	export MAKECMD="make"
	export BINARY="bp"
	export CSEXEC="$(which csound)"
fi
export BPEXEC="$PROJECTDIR/$BINARY"
export TESTSDIR="$PROJECTDIR/ctests"
export OUTPUTDIR="$PROJECTDIR/output"
export RESULTSDIR="$OUTPUTDIR/ctests"
export BACKUPDIR="$OUTPUTDIR/backups"
export PHPDIR="$PROJECTDIR/php"
export ENABLEUPLOAD=1
export ENABLEBACKUP=0
export KEEPLOCALARCHIVES=0
export UPLOADSERVER="ssh-w01ad877@v079009.kasserver.com:/www/htdocs/w01ad877/bp.bagong.de/archives/"
export TESTSARCHIVE="$OUTPUTDIR/bp-ctests-$NOW-$SYSTEM-$COMMIT.tar.gz"
export BINARYARCHIVE="$OUTPUTDIR/bp-binary-$NOW-$SYSTEM-$COMMIT.tar.gz"

# just in case
cd $PROJECTDIR

# optionally backup current tests and binary
if [ "$ENABLEBACKUP" != "0"  -a ! -d "$BACKUPDIR" ]; then
	mkdir -p $BACKUPDIR 
fi
	
if [ "$ENABLEBACKUP" != "0" -a -d "$RESULTSDIR" ]; then
	if [ ! -z "$(ls -A $RESULTSDIR)" ]; then
		cd $RESULTSDIR
		tar -czf $BACKUPDIR/bp-ctests-$NOW-$SYSTEM.tar.gz *
		cd $PROJECTDIR
	fi
fi

if [ "$ENABLEBACKUP" != "0" -a -f "$BPEXEC" ]; then
	cd $PROJECTDIR
	tar -czf $BACKUPDIR/bp-binary-$NOW-$SYSTEM.tar.gz $BINARY
fi

# create (or clean) folder for output of tests
if [ -d "$RESULTSDIR" -a -d "$RESULTSDIR" ]; then
	if [ ! -z "$(ls -A $RESULTSDIR)" ]; then
		rm $RESULTSDIR/*
	fi
else
	mkdir -p $RESULTSDIR
fi

# BUILD

## ggc-version - gcc sends versioninfo to stderror! Well, it is gcc, no need for an empty stdout file:
gcc -v 2> $RESULTSDIR/versioninfo-gcc.stderr

## "make clean" first for clean build and full build output verbosity

$MAKECMD -d > $RESULTSDIR/bp-make.stdout 2> $RESULTSDIR/bp-make.stderr

## check selfreference ;-)
### versioninfo (verify if binary runs at all)
$BPEXEC --version > $RESULTSDIR/versioninfo-bp.stdout 2> $RESULTSDIR/versioninfo-bp.stderr

### output visionstatement
$BPEXEC --help > $RESULTSDIR/helpinfo-bp.stdout 2> $RESULTSDIR/helpinfo-bp.stderr

### versioninfo csound - csound also sends versioninfo to stderr - on Windows though to stdout
$CSEXEC --version > $RESULTSDIR/versioninfo.stdout 2> $RESULTSDIR/versioninfo-csound.stderr


# TESTS

# change to ctests folder (tests do not run outside)
cd $TESTSDIR

# NotReich

## Output of produce grammar-file
export FILENAME=$RESULTSDIR/NotReich.produce-data-from-grammar
$BPEXEC produce -gr.NotReich > $FILENAME.stdout 2> $FILENAME.stderr

## Generate data-file from grammar
export FILENAME=$RESULTSDIR/NotReich.bpda
$BPEXEC produce -gr.NotReich -o $FILENAME > $FILENAME.stdout 2> $FILENAME.stderr

# generate csound score data to stdout
export FILENAME=$RESULTSDIR/NotReich.produce-csscore-from-grammar
$BPEXEC produce -gr.NotReich -d --csoundout - > $FILENAME.stdout 2> $FILENAME.stderr

# generate csound score file
export FILENAME=$RESULTSDIR/NotReich.sco
$BPEXEC produce -gr.NotReich -d --csoundout $FILENAME > $FILENAME.stdout 2> $FILENAME.stderr

# Render soundfile from csound score file
$CSEXEC -s -A -o $RESULTSDIR/NotReich.aiff $TESTSDIR/BP2test.orc $RESULTSDIR/NotReich.sco > $RESULTSDIR/NotReich.aiff.stdout 2> $RESULTSDIR/NotReich.aiff.stderr

# Use action templates with testgrammar and generate trace-file
export FILENAME=$RESULTSDIR/checktemplates.templates-from-grammar.trace
$BPEXEC templates -gr.checktemplates --traceout $FILENAME > $FILENAME.stdout 2> $FILENAME.stderr

# Compile test-grammar and generate trace-file
export FILENAME=$RESULTSDIR/symbols.compile-from-grammar.trace
$BPEXEC compile symbols.bpgr --traceout $FILENAME > $FILENAME.stdout 2> $FILENAME.stderr

# Add alphabets-file to test-grammar and generate trace-file (error fixed)
export FILENAME=$RESULTSDIR/symbols.compile-from-grammar-and-alphabet-file.trace
$BPEXEC compile symbols.bpgr symbols.bpho --traceout $FILENAME > $FILENAME.stdout 2> $FILENAME.stderror

# Produce output from test-grammar to stdout
export FILENAME=$RESULTSDIR/symbols.produce-from-grammar-and-alphabet
$BPEXEC produce symbols.bpgr symbols.bpho > $FILENAME.stdout 2> $FILENAME.stderr

# Produce output from test-grammar, add trace-file and send "show production" to stdout
export FILENAME=$RESULTSDIR/symbols.produce-from-grammar-and-alphabet.out
$BPEXEC produce symbols.bpgr symbols.bpho -o $FILENAME --traceout $FILENAME.trace --show-production > $FILENAME.stdout 2> $FILENAME.stderr

# Produce output from test-grammar symbols, add trace-file and send "trace-production" to stdout
export FILENAME=$RESULTSDIR/symbols.produce-from-grammar-and-alphabet-traced.out
$BPEXEC produce symbols.bpgr symbols.bpho -o $FILENAME --traceout $FILENAME.trace --trace-production > $FILENAME.stdout 2> $FILENAME.stderr

# Next test-file produce-all.bpgr
export FILENAME=$RESULTSDIR/produce-all.produce-from-grammar
$BPEXEC produce produce-all.bpgr > $FILENAME.stdout 2> $FILENAME.stderr
export FILENAME=$RESULTSDIR/produce-all.produce-all-from-grammar
$BPEXEC produce-all produce-all.bpgr > $FILENAME.stdout 2> $FILENAME.stderr

# Midi
export FILENAME=$RESULTSDIR/produce-all.produce-from-grammar.midi
$BPEXEC produce produce-all.bpgr -d --midiout $FILENAME > $FILENAME.stdout 2> $FILENAME.stderr

# Check alphabet indian, use for compilation, production with or without rtmidi
export FILENAME=$RESULTSDIR/Nadaka.compile-from-grammar
$BPEXEC compile -gr.Nadaka --traceout $FILENAME.trace > $FILENAME.stdout 2> $FILENAME.stderr
export FILENAME=$RESULTSDIR/Nadaka-indian.compile-from-grammar
$BPEXEC compile --indian -gr.Nadaka > $FILENAME.stdout 2> $FILENAME.stderr
export FILENAME=$RESULTSDIR/Nadaka-indian.produce-from-grammar
$BPEXEC produce --indian -gr.Nadaka > $FILENAME.stdout 2> $FILENAME.stderr
export FILENAME=$RESULTSDIR/Nadaka-indian.produce-from-grammar-to-rtmidi
$BOEXEC produce --indian -gr.Nadaka -d --rtmidi > $FILENAME.stdout 2> $FILENAME.stderr

# remove empty error- and trace-files
find $RESULTSDIR -name "*.stderr" -size 0 -delete
find $RESULTSDIR -name "*.trace" -size 0 -delete
echo
echo "Empty stderr- abd trace-files deleted"

# create archive of test-output
cd $RESULTSDIR
tar -czf $TESTSARCHIVE *
cd $PROJECTDIR
tar -czf $BINARYARCHIVE $BINARY
echo
echo "Archives of output-file and binary created"

# optionally upload
if [ "$ENABLEUPLOAD" != "0" ]; then
	# copy tarbals to bp.bagong.de/archives/
	scp $TESTSARCHIVE $UPLOADSERVER
	scp $BINARYARCHIVE $UPLOADSERVER
	echo "Archives uploaded (if no Errormessage appeared ;-))"
fi

if [ ! "$KEEPLOCALARCHIVES" == "1" ]; then
	# delete local archives while it still is now 
	rm $TESTSARCHIVE
	rm $BINARYARCHIVE
	echo "Archives deleted"
fi

# list result-files
echo
echo "All result-files in $RESULTSDIR:"
cd $RESULTSDIR
du -ch *

# list empty output-files
echo
echo "Empty non-error output files:"
find $RESULTSDIR -name "*.stdout" -size 0 -print

# END for now
echo
echo "DONE."
echo "The result-files are in folder $RESULTSDIR"
if [ "$KEEPLOCALARCHIVES" != "0" ]; then
	echo "Archives of the result-files are in folder $OUTPUTDIR"
fi
if [ "$ENABLEBACKUP" != "0" ]; then
	echo "Archives of existing output-files before this testsrun are in $BACKUPDIR"
fi

echo "Bye! ;-)"


// Bol Processor BP3 compatible with version BP2.9.8
// Data file saved as "-da.tryCsoundObjects". Date: 2020-08-01 13:16:10
-mi.tryCsoundObjects
-cs.tryCsoundObjects
-se.tryCsoundObjects
-ho.tryCsoundObjects

// File ‘-da.tryCsoundObjects’
// Check the production of Csound scores using sound-objects whose prototypes contain
// Csound scores.

// Play the following musical items and look at the Csound scores BP2 has produced, in
// comparison with the ones contained in sound-object prototypes 'a', 'b', 'c', 'midiobject'

a
// This yields the following score:
t 0.000 60.000
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i2 0.750 0.250 5.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F1
i3 0.750 0.100 643.50 1.000 ; D#6

// Note that this score is more complete than the one contained in sound-object 'a'
// (Type command-E and click 'Csound' to display it)
// The reason is that BP2 completes missing arguments with default values of the parameters
// they represent. Here for instance '90' is the default volume. Zeros represent default
// pitchbend or function table indexes.
// You can't play this example with the supplied "BP2test.orc" because the latter contains
// only the default instrument numbered 1 in this setup.

// Here you must look at the graphic display to understand why events of 'a' are 160ms
// delayed compared with 'b'
{a,b} c
i3 0.000 0.800 461.34 1.000 ; A5
i4 0.100 0.200 6.03 1.050 ; C2
i1 0.160 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i1 0.160 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i2 0.910 0.250 5.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F1
i3 0.910 0.100 643.50 1.000 ; D#6
i2 1.160 0.125 9.00 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; C5
i2 1.285 0.125 9.02 0.000 0.000 62.000 62.000 0.000 0.000 0.000 ; D5
i2 1.410 0.125 9.04 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; E5
i2 1.535 0.125 9.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F5

b midiobject
i3 0.000 0.800 461.34 1.000 ; A5
i4 0.100 0.200 6.03 1.050 ; C2
i1 1.160 0.666 7.04 90.000 90.000 0.000 0.000 0.000 0.000 ; E3
i1 1.160 1.000 7.00 90.000 90.000 0.000 0.000 0.000 0.000 ; C3
i1 2.160 1.000 7.02 90.000 90.000 0.000 0.000 0.000 0.000 ; D3
i1 2.493 0.667 7.07 90.000 90.000 0.000 0.000 0.000 0.000 ; G3

{a b a,c midiobject}
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i2 0.000 0.125 9.00 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; C5
i2 0.187 0.125 9.02 0.000 0.000 62.000 62.000 0.000 0.000 0.000 ; D5
i2 0.374 0.125 9.04 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; E5
i2 0.561 0.125 9.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F5
i2 0.750 0.250 5.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F1
i3 0.750 0.100 643.50 1.000 ; D#6
i3 0.840 0.800 461.34 1.000 ; A5
i4 0.940 0.200 6.03 1.050 ; C2
i1 1.500 0.666 7.04 90.000 90.000 0.000 0.000 0.000 0.000 ; E3
i1 1.500 1.000 7.00 90.000 90.000 0.000 0.000 0.000 0.000 ; C3
i1 2.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i1 2.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i2 2.750 0.250 5.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F1
i3 2.750 0.100 643.50 1.000 ; D#6
i1 3.000 1.000 7.02 90.000 90.000 0.000 0.000 0.000 0.000 ; D3
i1 3.499 0.667 7.07 90.000 90.000 0.000 0.000 0.000 0.000 ; G3

// Here we combine sound-objects (containing Csound scores) with simple notes that need
// to be converted to Csound.  These note are played on (default) MIDI channel 1 which
// is assigned to instrument 1

a C4 D4 b c
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i1 0.000 0.250 4.05 90.000 90.000 0.000 0.000 0.000 0.000 ; F0
i2 0.750 0.250 5.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F1
i3 0.750 0.100 643.50 1.000 ; D#6
i1 1.000 1.000 8.00 90.000 90.000 0.000 0.000 0.000 0.000 ; C4
i3 2.840 0.800 461.34 1.000 ; A5
i4 2.940 0.200 6.03 1.050 ; C2
i1 2.000 1.000 8.02 90.000 90.000 0.000 0.000 0.000 0.000 ; D4
i2 4.000 0.125 9.00 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; C5
i2 4.125 0.125 9.02 0.000 0.000 62.000 62.000 0.000 0.000 0.000 ; D5
i2 4.250 0.125 9.04 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; E5
i2 4.375 0.125 9.05 0.000 0.000 90.000 90.000 0.000 0.000 0.000 ; F5

// A continuous control of pitchbend

_pitchrange(200)  _pitchcont  _pitchbend(0) c _pitchbend(100)
i2 0.000 0.125 9.00 0.000 24.997 90.000 90.000 0.000 0.000 0.000 ; C5
i2 0.125 0.125 9.02 24.997 49.994 62.000 62.000 0.000 0.000 0.000 ; D5
i2 0.250 0.125 9.04 49.994 74.991 90.000 90.000 0.000 0.000 0.000 ; E5
i2 0.375 0.125 9.05 74.991 99.988 90.000 90.000 0.000 0.000 0.000 ; F5

// Volume control with effect on instruments 1 and 2, no effect on 3

_volumecont _volume(30) a _volume(127)
i1 0.000 0.250 4.05 30.000 54.250 0.000 0.000 0.000 0.000 ; F0
i1 0.000 0.250 4.05 30.000 54.250 0.000 0.000 0.000 0.000 ; F0
i2 0.750 0.250 5.05 0.000 0.000 102.750 127.000 0.000 0.000 0.000 ; F1
i3 0.750 0.100 643.50 1.000 ; D#6

// Here the continous pitchbend correction won't be applied because instrument 5, called by
// ‘d’, does not have a pitchbend parameter. However, the initial +100 cent value will be
// applied to the pitch parameter, thus yielding 466.16 Hz instead of 440 Hz.

_pitchrange(200)  _pitchcont  _pitchbend(100) d _pitchbend(0)
i5 0.000 0.500 466.16 ; A5

// Here the continous pitchbend correction results in various adjustments of pitchbender
// parameters on instruments called by a, b, c.  The simple notes C4 and D4 call
// instrument 1 because it is the one assigned to the (default) channel 1.
// Volume is also adjusted continuously.

_pitchrange(200)  _pitchcont _volumecont _volume(30) _pitchbend(-10) a C4 D4 b c _pitchbend(100) _volume(127)
i1 0.000 0.250 4.05 30.000 34.850 0.000 -10.000 -4.500 0.000 ; F0
i1 0.000 0.250 4.05 30.000 34.850 0.000 -10.000 -4.500 0.000 ; F0
i2 0.750 0.250 5.05 6.499 11.999 44.550 49.400 0.000 0.000 0.000 ; F1
i3 0.750 0.100 643.50 1.005 ; D#6
i1 1.000 1.000 8.00 49.400 68.800 0.000 12.000 34.000 0.000 ; C4
i3 2.840 0.800 461.34 1.069 ; A5
i4 2.940 0.200 6.03 1.151 ; C2
i1 2.000 1.000 8.02 68.800 88.200 0.000 34.000 56.000 0.000 ; D4
i2 4.000 0.125 9.00 77.990 83.490 107.600 112.450 0.000 0.000 0.000 ; C5
i2 4.125 0.125 9.02 83.490 88.989 77.466 80.807 0.000 0.000 0.000 ; D5
i2 4.250 0.125 9.04 88.989 94.488 117.300 122.150 0.000 0.000 0.000 ; E5
i2 4.375 0.125 9.05 94.488 99.988 122.150 127.000 0.000 0.000 0.000 ; F5

// Checking an arbitrary parameter "burb" which affects arguments 9, 10 and 11 of instrument 2
// In sound-object 'e', the 3d event (D3) already sets 'blurb' to start value 10 and to
// end value 30.  These values are added to the ones interpolated on the 'blurb' variation,
// yielding 72.8 and 130 respectively.

_cont(blurb) _value(blurb,25.6) e _value(blurb,100)
i2 0.000 0.333 7.04 8191.500 8191.500 64.000 64.000 25.600 50.375 0.000 ; E3
i2 0.000 0.500 7.00 8191.500 8191.500 64.000 64.000 25.600 62.800 0.000 ; C3
i2 0.500 0.500 7.02 8191.500 8191.500 64.000 64.000 72.800 130.000 0.000 ; D3
i2 0.666 0.333 7.07 8191.500 8191.500 64.000 64.000 75.150 99.963 0.000 ; G3

// Here the variation of 'blurb' is more complex, hence BP2 will describe it
// with function tables.

_cont(blurb) _value(blurb,12) e _value(blurb,110) _ _value(blurb,130) _ _  _value(blurb,80) _ _ _value(blurb,-20) _ _value(blurb,-10) _ _ _ _value(blurb,40)
f101 0.000 256 -7 12.000 76 110.000 76 130.000 180 96.750
i2 0.000 3.330 7.04 8191.500 8191.500 64.000 64.000 12.000 96.750 101.000 ; E3
f102 0.000 256 -7 12.000 51 110.000 51 130.000 102 80.000 154 30.000
i2 0.000 5.000 7.00 8191.500 8191.500 64.000 64.000 12.000 30.000 102.000 ; C3
f103 5.000 256 -7 40.000 51 -6.000 51 8.000 205 70.000 ; table shifted
i2 5.000 5.000 7.02 8191.500 8191.500 64.000 64.000 40.000 70.000 103.000 ; D3
f104 6.660 256 -7 -13.400 26 -10.000 230 39.917
i2 6.660 3.335 7.07 8191.500 8191.500 64.000 64.000 -13.400 39.917 104.000 ; G3
// In the Csound score of 'e', event 'D3' has non-zero initial values on arguments 9
// and 10. These values are added to the ones determined by variations of the 'blurb'
// parameter, thus yielding 40 for argument 9 (the start value of 'blurb') and
// 70 for argument 10 (the end value).  The same modification is applied to table
// f103.  Consequently, the first and last values of a function table always reflect the
// start and end values of the parameter.  This allows the Csound instrument to operate
// consistently, either interpolating start and end values, or looking at the attached
// function table.

// BP2 combines Csound parameters either additively or multiplicatively.  For the predefined
// parameters mapped to MIDI the combination mode is preset: all parameters are combined
// additively expect volume.  For other parameters the user may choose both the default
// value and the combination mode.  For instance, instrument 6 deals with a 'oops' parameter
// combining multiplicatively.  Sound-object 'f' contains calls to this instrument, with
// values of 'oops' that are not the default ones.

f
i6 0 0.5 7.00 0 0.000 90.000 90.000 0.000 0.000 0.000 0.500 1.500 0.000 0.000 0.000 0.000 ; C3
i6 0.5 0.5 7.02 0 0   90.000 90.000 0.000 0.000 0.000 0.000 4.700 0.000 0.000 0.000 0.000 ; D3
i6 1 0.5 7.04 0 0.000 90.000 90.000 0.000 0.000 0.000 0.250 2.500 0.000 0.000 0.000 0.000 ; E3

_cont(oops) _value(oops,0) f _value(oops,4)
i6 0 0.5 7.00 0 0 90.000 90.000 0.000 0.000 0.000 0.000 2.000  0.000 0.000 0.000 0.000 ; C3
i6 0.5 0.5 7.02 0 00 90  90.000 0.000 0.000 0.000 0.000 12.533 0.000 0.000 0.000 0.000 ; D3
i6 1 0.5 7.04 0 0 90.000 90.000 0.000 0.000 0.000 0.667 10.000 0.000 0.000 0.000 0.000 ; E3
// As expected, 'oops' start value in 'C3' is zero, and its end value in 'E3' is
// 10 = 4 * 2.5/1, where '1' is the default value.

// -------- GENERAL REMARK -------------
// The time resolution (10ms) has no effect on the accuracy of timings in Csound
// scores.  It concerns only the dates of MIDI messages.
// (See the "Time accuracy" dialog accessible from the "Misc" menu)
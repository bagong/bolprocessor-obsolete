<!DOCTYPE html>
<!-- saved from url=(0043)https://leti.lt/bolprocessor/CheckList.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" href="./CheckList_files/bp.css">
</head><body>
<p style="color:blue; text-align:center;"><b>This is a check list for the PHP interface of Bol Processor under development.<br><font color="red">➡</font> Use it to try all procedures and make sure they work in your environment…</b></p>
<p>Currently, the new version of Bol Processor does not interact with MIDI. It only produces <a target="_blank" href="https://en.wikipedia.org/wiki/Csound">Csound scores</a> requiring an installation of Csound to produce sounds. In addition, some files are not yet interpreted by the console application, which may result in the diagnosis of errors or an erratic output. Therefore, this PHP interface is dedicated to checking interactions with the Bol Processor console in any environment accepting the compilation of the binary program.</p>
<hr>

<h3>Install the package(s)</h3>
<ol>
<ol>
<li>To use this new Bol Processor, you need to install an AMP on your desk computer:<br>
<a target="_blank" href="https://en.wikipedia.org/wiki/List_of_Apache-MySQL-PHP_packages">https://en.wikipedia.org/wiki/List_of_Apache-MySQL-PHP_packages</a><br>This will allow you to run a local web service. Bol Processor cannot be used on shared site because most hosting services do not accept binary applications.</li>
<li>On Mac and Windows machines we recommend the free-of-charge version of <a target="_blank" href="https://www.mamp.info/en/mamp/mac/">MAMP</a> that comes with all necessary pre-installed features. Only Apache and PHP are required since MySQL is not used by Bol Processsor's interface.</li>
<li>You should have a "bolprocessor" folder in the space coverered by your local web server, for instance, the "htdocs" folder created by MAMP. Inside that folder, at the top level, copy the following items:<ul>
<li>The "php" folder</li>
<li>The "BP2_help.txt" file</li>
<li>The "bp" binary application constructed by compiling the server's package available as "bpconsole" on <a target="_blank" href="http://www.anthonykozar.net/files/BolProcessor/">http://www.anthonykozar.net/files/BolProcessor/</a></li>
<li>The "ctest" folder containing examples of Bol Processor data: grammars, alphabets, sound-object prototypes etc. You may include any data saved with the <a target="_blank" href="https://bolprocessor.sourceforge.io/#Downloads">BP2.9.8 application</a>.</li>
</ul></li>
<li>Keep a copy of the "ctest" folder because you will modify some data files during the check and you might want to return to initial versions.</li>
</ol>
<h3>First checks</h3>
<ol>
<li>Launch your AMP application and point a browser at the file <i>bolprocessor/php/index.php</i>. (If you are using MAMP, the URL may look like <i>http://localhost/try/bolprocessor/php/</i>.) You should now see "bp", "BP2_help.txt" and the "ctest" folder. Click that folder. It will display a list of available data files. Their names are tagged with color labels indicating the type of data. Generally, for instance, a Bol Processor grammar's name starts with "-gr" but it may as well end with extension "bpgr". Both conventions are supported by Bol Processor. <i>This had become necessary, long time ago, when upgrading from MacOS 9 to MacOS 10…</i></li>
<li>Click "-gr.NotReich" to open a grammar. This will automatically create a "my_output" folder at the top of "bolprocessor" in case it wasn't already there. Try to create an output folder with a different name and verify its presence at the top of the "bolprocessor" folder. The output folder's name is saved in "_settings.php" to be recalled each time the interface is used; you don't have to modify it yourself! <i>Failure to modify the settings and/or creation of output folders would reveal a bad configuration of permissions on your local web server.</i></li>
<li>You can create subfolders of the current output folder. If the current output is set to "my_output" create for instance "my_output/todays_folder". The interface automatically replaces spaces with '_' as these are badly handled by some systems.</li>
</ol>
<h3>Produce items</h3>
<ol>
<li>Click the <b>PRODUCE ITEM(s)</b> button. This will show a "BP console" pop-up window and call the console application. The pop-up window should be visible irrespective of security settings on your web browser, because it is created by a standard <i>window.open()</i> call attached to the button.</li>
<li>If the console application is running, a detailed list of actions will flow on the pop-up window. One of them is "Errors: 0" and another one, near the bottom: "[leaked: 0]". Both indicate that the running was perfect. On top of the window, the command line created to call the console is displayed. This is used for checking both the interface and the response of the console.</li>
<li>At the top of "BP console", two links will be shown to display the "output file" and the "trace file". The "output file" contains the Csound score created with the grammar. The "trace file" displays the full process of derivations used for creating the item. It has been created because the "--trace-production" option had been appended to the command line for the sake of checking details. Both files should appear in pop-up windows.</li>
<li>Check the <i>bolprocessor/my_ouput</i> folder. It should contain the "out.sco" text file which was the default name for this Csound score. The "sco" extension is used for Csound scores.</li>
<li>Return to the grammar and select the "BP data file" option for the output, then click the <b>SAVE</b> button. Now the name "out.sco.bpda" will be created, but you can change it to anything while keeping the "bpdata" extension.</li>
<li>Click again the <b>PRODUCE ITEM(s)</b> button. Now, less messages are displayed on the console. The "trace file" displays the same derivations whereas the "output file" displays the item that was produced in Bol Processor score notation. This file should also be visible in the <i>bolprocessor/my_ouput</i> folder.</li>
<li>If you return to the tag displaying the content of your "ctest" folder, you can click the "[move up]" link and enter the "my_output" folder. There you will see "out.sco" and "out.sco.bpdata" which have just been created. Because of its "bpdata" extension, the data file has a link opening it with the interface. Follow that link to verify that it is displayed. At the moment, there is no <b>PLAY</b> command to send this data to a MIDI device via the console. You may close this tag and resume browsing the "ctest" folder.</li>
</ol>
<h3>Help messages</h3>
<ol>
<li>Return to the "-gr.NotReich" grammar. At the bottom of the page, click the <b>SHOW HELP ENTRIES</b> button. This will display the grammar with links appearing on reserved words. Click for instance the link on "_volumecont". A pop-up window will open and display the help at the very location of the reserved word. <i>The help file is still the one used by BP2.9.8. It will need an upgrade to the new version.</i></li>
<li>At the bottom of the grammar file, two more buttons are displayed: <b>EDIT ‘-se.NotReich’</b> and <b>EDIT ‘-or.NotReich’</b>. These have been automatically produced because of the declarations "-se.NotReich" and "-or.NotReich" on top of the grammar. Click these buttons to read and interpret the files.</li>
<li>You can change a few settings, but most of them will have no effect as "-se.NotReich" is not yet read by the console. In the meantime, the interface picks up a few settings and modifies the command line accordingly. This is the case with "Trace production": if you unselect this option and click <b>SAVE PARAMETERS</b>, then go back to the grammar, click <b>SAVE</b> followed with <b>PRODUCE ITEM(s)</b>, you will get the "output file" and no "trace file". The "--trace-production" option no longer appears in the command line.</li>
</ol>
<h3>Error messages</h3>
<ol>
<li>Let us now do something wrong to check error messages. In "-se.NotReich" change the "Note convention" from ‘0’ (English) to another setting such as ‘1’ (French). Click <b>SAVE PARAMETERS</b>,  go back to the grammar, click <b>SAVE</b> and <b>PRODUCE ITEM(s)</b>. Nothing will happen because you are still producing a Bol Processor score and not trying to send it to a MIDI device. Change back the output file format to CSOUND and click <b>PRODUCE ITEM(s)</b>. Now, the "output file" won't be visible because the console could not create it due to its misunderstanding of note names. It says for instance that "Variable ‘G3’ was found" because it interprets "G3" as a variable and not a simple note: “G3” should be replaced with “do3”!</li>
<li><b>PRODUCE ITEM(s)</b> will tell that errors have been found and these errors will appear on the "error trace" file.</li>
<li>Try the same procedures with "-gr.trial.mohanam". It is set for the Indian note convention = 2. After modifying the convention, the "output file" will be empty.</li>
</ol>
<h3>Compile a grammar</h3>
<ol>
<li>So far, grammars were well-shaped and clicking button <b>COMPILE GRAMMAR</b> would tell that there is no error. Now go to the grammar named "unknown-terminal.bpgr" and click <b>COMPILE GRAMMAR</b>. It tells that errors have been found and the "trace file" explains that it found (at least) an unknown terminal symbol. Indeed, symbols 'x' and 'a' have not been declared as sound-objects in a related "-ho" alphabet file.</li>
<li><b>COMPILE GRAMMAR</b> renumbers subgrammars and rules. If you are still playing with "named unknown-terminal.bpgr", replace "gram#1[1] S --&gt; A B" with "S --&gt; A B" and click <b>COMPILE GRAMMAR</b>. The numbering "gram#1[1]" will be restored. This takes into account adding or deleting rules…</li>
<li>The grammar named "symbols.bpgr" compiles successfully because its has an attached alphabet file containing all its terminal symbols. The alphabet file is named "symbols.bpho" and its declaration in the grammar is "-ho.:symbols.bpho". This is a trick for recognizing file types whose names do not start with a standard prefix.</li>
</ol>
<h3>Sound-objects</h3>
<ol>
<li>Let us now check sound-object prototypes. Open "-mi.abc1" (or a copy of it). If the file is correct, below the horizontal line you should see a table containing the names of its sound-object prototypes: <i>a, a', b, chik, cycle1</i> etc.</li>
<li>When opening "-mi.abc1", a temporary folder has been created in the "ctest" folder. It has a complicated name, for instance "-mi.abc1_ec02bffaaee23e051fa2afee52e57520_temp" which contains the session identifier. If you restart your browser (or your computer) the session number will be different. This folder will therefore become obsolete and a new one will be created with the current session identifier. The interface automatically deletes obsolete folders once they are 24-hour old. Keep the browser open as long as you work on a particular set of sound-object prototypes!</li>
<li>Despite the dependency on session identifiers, no data is lost because "-mi.abc1" is automatically saved at a period of 30 seconds while you are working on its sound-object prototypes. This autosave is displayed in red at the top of the page.</li>
<li>In the table you are offered the option of deleting sound-objects. Try a few <b>DELETE</b> buttons. The good news is that a button <b>RESTORE ALL DELETED OBJECTS</b> will appear…&nbsp;Click the button to undelete these sound-objects and return to the initial state.</li>
<li>You are also offered the option of duplicating a sound-object. If you do it, don't forget to add its name to every "-ho" (alphabet) file declaring an affiliation with "-mi.abc1". The same applies to <b>CREATE A NEW OBJECT</b>. The interface makes sure that you are not creating several objects with identical names.</li>
<li>Let us now edit an object, for instance "chik". Click the button bearing that name. Parameters  are the same as the ones displayed on BP2.9.8. <i>This interface will be documented and we hope to include a graphic representation of the sound-object similar to that of the older Mac version.</i> You can change any parameter and click <b>SAVE THIS PROTOTYPE</b>. In most cases the consistency of values is not checked. We will need a sound output to verify the effect.</li>
<li>The <b>PLAY</b> sends a command to the console that will later be executed to play the sound-object or a combination of sound-objects (more generally a polymetric structure) entered on the form.</li>
</ol>
<h3>Modifying MIDI codes</h3>
<ol>
<li>At the bottom of each sound-object prototype page, links <b>EXPLICIT MIDI codes</b> and <b>TIME-STAMPED MIDI bytes</b> display the lists of MIDI instructions and times-stamped bytes that will be sent to the MIDI driver. (First number is actually the number of bytes.)</li>
<li>Notice that there are "Channel pressure" MIDI instructions in this object. These may have been picked up by playing on a pressure-sensitive keyboard and their relevance is low since channel pressure can be controlled at a higher lever by performance parameters. Therefore it is wise to click <b>SUPPRESS channel pressure</b> and check the effect on <b>EXPLICIT MIDI codes</b> and <b>TIME-STAMPED MIDI bytes</b>. <i>If the effect is not immediately visible (it depends on browsers) just reload the pop-up window.</i> Other "continuous" parameters such as "volume control" can be suppressed in a similar manner.</li>
<li><b>APPEND AllNotesOff (all channels)</b> may be a useful option to make sure that this object will switch off all pending notes on the sound machine. It sends an instruction on each of the 16 channels.</li>
<li>The MIDI content of an object can be modified by loading a MIDI file. Click <b>Choose File</b> to select a MIDI file — for instance "test.mid" in the "ctest" folder — then <b>send</b> to upload it. It is not finalized immediately: you can examine <b>EXPLICIT MIDI codes</b> and <b>TIME-STAMPED MIDI bytes</b> of this file before saving it to the sound-object prototype. The "test.mid" example contains no less than 432 bytes because of "Channel pressure" and "Parameter ctrl 7" messages controlling pressure and volume. You can accept the import by clicking <b>SAVE</b> or reject it clicking <b>CANCEL</b>. At present there is no "undo" in case the MIDI sequence has been mistakenly replaced or deleted.
</li><li>An important feature is <b>QUANTIZE NoteOns</b>. We are dealing with "striated sound-objects", thereby meaning that they are designed to be played at a certain tempo. The tempo at which the MIDI content of this object has been captured is generally not the same at which it will be performed, the latter depending on performance parameters. The reference tempo is specified by <b>Tref</b> which is here 1000&nbsp;ms for a metronome at 60 beats/mn. The MIDI content uploaded from "test.mid" has a duration of 3500&nbsp;ms, which means 3.5 beats. This duration can be adjusted either in milliseconds or in beat counts. Whatever the duration, it is often convenient to locate NoteOn and NoteOff events on a precise fraction of the beat. An quantization of 1/64 beat is often a good choice. To make things easier we well set it to 1/50 beat, which means 20&nbsp;ms.<br>Before clicking <b>QUANTIZE NoteOns</b>, check <b>EXPLICIT MIDI codes</b>. You will notice that there is a NoteOn of key 62 at 804&nbsp;ms and a NoteOff of key 60 at 825&nbsp;ms. Set quantization at 1/50 beats and click <b>QUANTIZE NoteOns</b>. Now the timings of these events have been changed to 800&nbsp;ms and 820&nbsp;ms respectively, which are multiples of 20 closest to the original timings.</li>
<li>Don't forget that the “-mi” file is saved in the background while you are modifying sound-object prototypes… To return to the initial state, close the “-mi” tag and restore the “-mi” file from its copy!</li>
</ol>
<hr>
<p style="color:blue; text-align:center;">End of the check list as per July 28, 2020.</p>
</ol></body></html>